File.import "../../TacticLib.ist";
File.import "../Syntax/Syntax.ist";

openModule /Prelude/;
openModule /BehaviorPhase/;
openModule /CalfSyn/;

beginModule "Tpv";

define /TPV_Sem {M B} L i/ 
/
    fn A . Ext.t (Ext.S' (U i) (fn z . `tmv B (L z) (A z)))
//
    forall 
        (M : intersect i . PhaseSig i)
        (B : intersect i . BehSig i) 
        (L : `SynM M -> intersect i . `Sig B i) .
    forall i .
    (forall (z : `SynM M) . `tpv B (L z)) -> U (1 + i)
/;
unfold /TPV_Sem/.
inference.
typecheck.
qed ();

lemma "TPV_Sem_isClosedModal"
/
    forall 
        (M : intersect i . PhaseSig i)
        (B : intersect i . BehSig i)
        (L : `SynM M -> intersect i . `Sig B i) .
    forall i A . 
        isClosedModalM M (TPV_Sem L i A)
/;
inference.
intro /M B L i A/.
unfold /TPV_Sem/.
apply /Ext.isClosedModal/.
qed ();

define /TPV {M B} G L i/
/
    Glue.t (G (fn z . `tpv B (L z)) (TPV_Sem L i))
//
    forall 
        (M : intersect i . PhaseSig i)
        (B : intersect i . BehSig i)
        (G : intersect i . Glue.GLUE_CM M i) 
        (L : `SynM M -> intersect i . `Sig B i) .
    forall (i : level) . 
    Ext.t (Ext.S' (U (1 + i)) (fn z . `tpv B (L z)))
/;
unfold /TPV/.
inference.
introOf /M B G L i/. 
reduce //.

infer /Ext.S' (U (1 + i)) (fn z . `tpv B (L z))/ /HtExt/.

so /Glue.glueCM_tp M G (fn z . `tpv B (L z)) (TPV_Sem L i)/ /HtGlty/.
1:{ apply /TPV_Sem_isClosedModal/. }

apply /Ext.intro/.
intro /z _/.
rewrite /-> Glue.syn_eqty _ z/ >> auto.
qed ();

define /TPV_open {M B G L} z A/
/
    A
//
    forall 
        (M : intersect i . PhaseSig i)
        (B : intersect i . BehSig i)
        (G : intersect i . Glue.GLUE_CM M i) 
        (L : `SynM M -> intersect i . `Sig B i) .
    intersect (i : level) .
    forall (z : `SynM M) (A : Ext.wk (TPV G L i)) . `tpv B (L z)
/;
unfold /TPV_open/.
inference.
introOf /M B G L i z A/. reduce //.
infer /TPV G L i/ /HtTPV/.
rewrite /-> Ext.syn_eq _ (TPV G L i) z in A/.
unfold /Ext.pt in A, Ext.wk in A/.
auto.
qed ();

endModule ();
